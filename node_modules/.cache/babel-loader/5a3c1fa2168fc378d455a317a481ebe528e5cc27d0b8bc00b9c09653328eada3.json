{"ast":null,"code":"const API_KEY=process.env.REACT_APP_WEATHER_API_KEY;const BASE_URL=process.env.REACT_APP_WEATHER_API_URL;export class WeatherService{static async getWeatherForecast(location,selectedDayOfWeek){const today=new Date();const currentDayOfWeek=today.getDay();// 0-6, where 0 is Sunday\n// If selecting today, use today's date\nif(selectedDayOfWeek===currentDayOfWeek){const todayStr=today.toISOString().split('T')[0];const nextWeekDate=new Date(today);nextWeekDate.setDate(today.getDate()+7);// Get data for today and next week\nconst[todayData,nextWeekData]=await Promise.all([this.fetchWeatherData(location,todayStr,todayStr),this.fetchWeatherData(location,nextWeekDate.toISOString().split('T')[0],nextWeekDate.toISOString().split('T')[0])]);if(!todayData[0]||!nextWeekData[0]){throw new Error('Failed to fetch weather data for today or next week');}return{firstDay:todayData[0],secondDay:nextWeekData[0]};}// For other days, calculate as before\nlet daysUntilSelected=selectedDayOfWeek-currentDayOfWeek;if(daysUntilSelected<=0){daysUntilSelected+=7;}const firstWeekDate=new Date(today);firstWeekDate.setDate(today.getDate()+daysUntilSelected);const secondWeekDate=new Date(firstWeekDate);secondWeekDate.setDate(firstWeekDate.getDate()+7);const[firstWeekData,secondWeekData]=await Promise.all([this.fetchWeatherData(location,firstWeekDate.toISOString().split('T')[0],firstWeekDate.toISOString().split('T')[0]),this.fetchWeatherData(location,secondWeekDate.toISOString().split('T')[0],secondWeekDate.toISOString().split('T')[0])]);if(!firstWeekData[0]||!secondWeekData[0]){throw new Error('Failed to fetch weather data for one or both weeks');}return{firstDay:firstWeekData[0],secondDay:secondWeekData[0]};}static async fetchWeatherData(location,startDate,endDate){if(!API_KEY){throw new Error('Weather API key is not configured. Please check your .env file.');}if(!BASE_URL){throw new Error('Weather API key is not configured. Please check your .env file.');}const url=\"\".concat(BASE_URL,\"/\").concat(encodeURIComponent(location),\"/\").concat(startDate,\"/\").concat(endDate,\"?unitGroup=us&include=hours&key=\").concat(API_KEY);try{const response=await fetch(url,{method:'GET',headers:{'Accept':'application/json','Content-Type':'application/json'}});if(!response.ok){const errorText=await response.text();console.error('Weather API error details:',{status:response.status,statusText:response.statusText,headers:Object.fromEntries(response.headers.entries()),error:errorText});throw new Error(\"Weather API error (\".concat(response.status,\"): \").concat(response.statusText,\" - \").concat(errorText));}const data=await response.json();return this.transformWeatherData(data);}catch(error){console.error('Detailed error:',error);throw error;}}static transformWeatherData(data){return data.days.map(day=>({datetime:day.datetime,temp:day.temp,icon:day.icon,hours:day.hours.map(hour=>({datetime:hour.datetime,temp:hour.temp,humidity:hour.humidity,precipprob:hour.precipprob,windspeed:hour.windspeed}))}));}}","map":{"version":3,"names":["API_KEY","process","env","REACT_APP_WEATHER_API_KEY","BASE_URL","REACT_APP_WEATHER_API_URL","WeatherService","getWeatherForecast","location","selectedDayOfWeek","today","Date","currentDayOfWeek","getDay","todayStr","toISOString","split","nextWeekDate","setDate","getDate","todayData","nextWeekData","Promise","all","fetchWeatherData","Error","firstDay","secondDay","daysUntilSelected","firstWeekDate","secondWeekDate","firstWeekData","secondWeekData","startDate","endDate","url","concat","encodeURIComponent","response","fetch","method","headers","ok","errorText","text","console","error","status","statusText","Object","fromEntries","entries","data","json","transformWeatherData","days","map","day","datetime","temp","icon","hours","hour","humidity","precipprob","windspeed"],"sources":["/Users/leonliu/Desktop/Projects/WeatherApp/src/services/weather/weatherService.ts"],"sourcesContent":["import { WeatherData } from '../../types/index';\n\nconst API_KEY = process.env.REACT_APP_WEATHER_API_KEY;\nconst BASE_URL = process.env.REACT_APP_WEATHER_API_URL;\n\nexport class WeatherService {\n\n  public static async getWeatherForecast(location: string, selectedDayOfWeek: number): Promise<{\n    firstDay: WeatherData;\n    secondDay: WeatherData;\n  }> {\n    const today = new Date();\n    const currentDayOfWeek = today.getDay(); // 0-6, where 0 is Sunday\n    \n    // If selecting today, use today's date\n    if (selectedDayOfWeek === currentDayOfWeek) {\n      const todayStr = today.toISOString().split('T')[0];\n      const nextWeekDate = new Date(today);\n      nextWeekDate.setDate(today.getDate() + 7);\n\n      // Get data for today and next week\n      const [todayData, nextWeekData] = await Promise.all([\n        this.fetchWeatherData(\n          location,\n          todayStr,\n          todayStr\n        ),\n        this.fetchWeatherData(\n          location,\n          nextWeekDate.toISOString().split('T')[0],\n          nextWeekDate.toISOString().split('T')[0]\n        )\n      ]);\n\n      if (!todayData[0] || !nextWeekData[0]) {\n        throw new Error('Failed to fetch weather data for today or next week');\n      }\n\n      return {\n        firstDay: todayData[0],\n        secondDay: nextWeekData[0],\n      };\n    }\n    \n    // For other days, calculate as before\n    let daysUntilSelected = selectedDayOfWeek - currentDayOfWeek;\n    if (daysUntilSelected <= 0) {\n      daysUntilSelected += 7;\n    }\n\n    const firstWeekDate = new Date(today);\n    firstWeekDate.setDate(today.getDate() + daysUntilSelected);\n    \n    const secondWeekDate = new Date(firstWeekDate);\n    secondWeekDate.setDate(firstWeekDate.getDate() + 7);\n\n    const [firstWeekData, secondWeekData] = await Promise.all([\n      this.fetchWeatherData(\n        location,\n        firstWeekDate.toISOString().split('T')[0],\n        firstWeekDate.toISOString().split('T')[0]\n      ),\n      this.fetchWeatherData(\n        location,\n        secondWeekDate.toISOString().split('T')[0],\n        secondWeekDate.toISOString().split('T')[0]\n      )\n    ]);\n\n    if (!firstWeekData[0] || !secondWeekData[0]) {\n      throw new Error('Failed to fetch weather data for one or both weeks');\n    }\n\n    return {\n      firstDay: firstWeekData[0],\n      secondDay: secondWeekData[0],\n    };\n  }  \n  private static async fetchWeatherData(location: string, startDate: string, endDate: string): Promise<WeatherData[]> {\n    if (!API_KEY) {\n      throw new Error('Weather API key is not configured. Please check your .env file.');\n    }\n    if (!BASE_URL) {\n      throw new Error('Weather API key is not configured. Please check your .env file.');\n    }\n\n    const url = `${BASE_URL}/${encodeURIComponent(location)}/${startDate}/${endDate}?unitGroup=us&include=hours&key=${API_KEY}`;\n    \n    try {\n      const response = await fetch(url, {\n        method: 'GET',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json',\n        },\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Weather API error details:', {\n          status: response.status,\n          statusText: response.statusText,\n          headers: Object.fromEntries(response.headers.entries()),\n          error: errorText\n        });\n        throw new Error(`Weather API error (${response.status}): ${response.statusText} - ${errorText}`);\n      }\n\n      const data = await response.json();\n      return this.transformWeatherData(data);\n    } catch (error) {\n      console.error('Detailed error:', error);\n      throw error;\n    }\n  }\n\n  private static transformWeatherData(data: any): WeatherData[] {\n    return data.days.map((day: any) => ({\n      datetime: day.datetime,\n      temp: day.temp,\n      icon: day.icon,\n      hours: day.hours.map((hour: any) => ({\n        datetime: hour.datetime,\n        temp: hour.temp,\n        humidity: hour.humidity,\n        precipprob: hour.precipprob,\n        windspeed: hour.windspeed,\n      })),\n    }));\n  }\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}